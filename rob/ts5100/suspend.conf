#-*-mode: sh-*-
# Configuration of software suspension
#

# If your graphic device is not able to return properly from suspend
# you can switch to textconsole before suspend and return to your
# X-console after resume.
# If you use an nvidia card, you can set this to nvidia. This
# will try to restore your 3D upon resume. This trick may be useful
# for other cards.
# Default: "no"
SWSUSP_LEAVE_X_BEFORE_SUSPEND="nvidia"
#SWSUSP_LEAVE_X_BEFORE_SUSPEND="no"

# Some services (e.g. network) may cause some hangs if they are not
# stopped before a suspend/resume cycle. You can set
# SWSUSP_RESTART_SERVICES to a list of services to stop before suspend
# and automatically restart after resume.
# If suspending results in killing some application because of lack
# of memory, you may also add here some of your launched services,
# so as to save memory. Good candidates are httpd, nfsserver, sendmail, etc.
# Default: " exim inetd pcmcia alsa setserial nfs-common networking ifupdown laptop-net"
#SWSUSP_RESTART_SERVICES=" exim inetd pcmcia alsa setserial nfs-common nfs-kernel-server networking ifupdown laptop-net irda"
SWSUSP_RESTART_SERVICES=" exim inetd pcmcia alsa nfs-common nfs-kernel-server networking ifupdown laptop-net irda rtm-battmon acpid"

# Some services may need to be stopped before a suspend/resume cycle.
# You can set STOP_SERVICES_BEFORE_SUSPEND to a list of services to stop
# before suspend. These services will NOT automatically be restarted after
# the resume, use SWSUSP_RESTART_SERVICES instead if you want this
# behaviour.
# Default: " umountnfs.sh"
#SWSUSP_STOP_SERVICES_BEFORE_SUSPEND=" nfs-kernel-server nfs-common umountnfs.sh"
#SWSUSP_STOP_SERVICES_BEFORE_SUSPEND=" irda nfs-kernel-server nfs-common umountnfs.sh"
SWSUSP_STOP_SERVICES_BEFORE_SUSPEND=" umountnfs.sh"

# Conversely, you can set START_SERVICES_AFTER_RESUME to a list
# of services to start after resuming.
# Default: " mountnfs.sh modutils"
#SWSUSP_START_SERVICES_AFTER_RESUME=" nfs-common nfs-kernel-server mountnfs.sh modutils"
SWSUSP_START_SERVICES_AFTER_RESUME=" mountnfs.sh modutils  gnome-tweaks"

# Those are programs that prevent from suspending. If they are
# running and --force or --kill option aren't used, suspension
# is aborted.
# Default: "vmware pppd"
SWSUSP_NON_COMPATIBLE_PROGS="vmware pppd"

# You can ask to killall these applications before suspend.
# Default: none
SWSUSP_STOP_PROGS_BEFORE_SUSPEND=""

# You can ask to run some applications after resume using this variable.
# For instance, it may restart your ADSL connection.
# Default: none
SWSUSP_START_PROGS_AFTER_RESUME="/usr/local/sbin/netstart /usr/local/sbin/tosh5100-smcinit"

# Some modules should be unloaded before a suspend/resume cycle. You
# can set UNLOAD_MODULES_BEFORE_SUSPEND to "yes" if you want
# unused modules to be removed from kernel space before suspend. 
# This will be done after stopping services.
# With "no", nothing will be done before suspension.
# Default: "yes"
SWSUSP_UNLOAD_MODULES_BEFORE_SUSPEND="yes"

# If the following mount points cannot be unmounted, 
# then suspension is aborted unless --force or --kill
# option is used on command line
# Default: "/mnt /floppy /cdrom"
SWSUSP_UMOUNTS="/mnt /floppy /cdrom"

# These mount points should be mounted after suspend
# They should appear in /etc/fstab
# Default: none
SWSUSP_REMOUNTS=""

# If the following interfaces cannot be stopped, 
# then suspension is aborted unless --force or --kill
# option is used on command line
# Default: "eth0 ppp0"
SWSUSP_DOWNIFS="eth0"
# ppp0"

# These interfaces should be started after suspend
# With "auto" the interfaces stopped before suspension
# will be started in reverse order.
# Default: "auto"
SWSUSP_UPIFS="auto"

# These modules should be loaded after suspend
# Default: 
#SWSUSP_INSERTMODS="usbmouse psmouse"
SWSUSP_INSERTMODS="cpad ide-scsi mousedev ac battery button fan processor thermal toshiba_acpi"

# Use FORCE_SUSPEND_MODE to reset the behaviour of
# suspension. If empty, this let the suspension
# behaviour unchanged. "0" will force shut off after
# suspension. "1" will force reboot. You can add an optional
# second parameter to tune the suspension display (see swsusp
# documentation for more information).
# Alternatively, you can use the keyword "acpi" to use the
# /proc/acpi/sleep interface in place of /proc/sys/kernel/swsusp
# this will cause echo "1 p1 p2 p3 p4" > /proc/sys/kernel/swsusp"
# 1 for immediate suspension
# p1 = 0 for halt,  p1 = 1 for reboot
# p2 = 2 for progress bar, 18 for progress bar and beeps (swsusp
#        version above beta19 only).
# p3, p4 are optional debugging options for hackers (see swsusp kernel patch documentation).
# Default: "0 2", i.e. halt, progress bar
#SWSUSP_FORCE_SUSPEND_MODE="0 2"
SWSUSP_FORCE_SUSPEND_MODE="acpi"

# If you have problems with hardware clock drift amplified by
# suspension, try to set SAVE_CLOCK_ON_SUSPEND to "yes". The
# kerneltime will being saved before suspending. If you have
# network access, best is to set this variable to yes and add
# xntpd in services to start/stop below. If you haven't such
# a service permanently available, it is better to leave it
# to no, so that hardware clock remains as a reference for
# the system.
# Default: "no"
SWSUSP_SAVE_CLOCK_ON_SUSPEND="no"

# On some hardware, the power is cut off before the disk has 
# flushed his own hardware cache. Insert the device of your
# swap partition here (e.g. /dev/hda) if you want to issue
# hdparm -W 0 <device>
# before suspension.
# Default: none
SWSUSP_DISABLE_HW_DISK_CACHE=""

